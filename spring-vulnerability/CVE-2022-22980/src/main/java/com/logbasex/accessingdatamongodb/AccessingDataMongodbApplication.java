package com.logbasex.accessingdatamongodb;

import com.logbasex.accessingdatamongodb.dto.Customer;
import com.logbasex.accessingdatamongodb.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.data.mongodb.repository.support.MongoRepositoryFactory;
import org.springframework.expression.spel.standard.SpelExpressionParser;

//@SpringBootApplication(exclude = {MongoAutoConfiguration.class, MongoDataAutoConfiguration.class})
//@EnableMongoRepositories(basePackages = "com.logbasex.accessingdatamongodb.repository")
@SpringBootApplication
public class AccessingDataMongodbApplication implements CommandLineRunner {
	
	@Autowired
	private CustomerRepository repository;
	
	@Autowired
	private MongoTemplate mongoTemplate;
	
	public static void main(String[] args) {
		SpelExpressionParser parser = new SpelExpressionParser();
		parser.parseExpression("T(java.lang.Runtime).getRuntime().exec(\"gnome-calculator\")");
		//https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html#d0e11977
		//parse type
		parser.parseExpression("T(String)").getValue(Class.class);
		
		ConfigurableApplicationContext context = SpringApplication.run(AccessingDataMongodbApplication.class, args);
		CustomerRepository contextCustomerBean = context.getBean(CustomerRepository.class);
		contextCustomerBean.findAll();
	}
	
	@Override
	public void run(String... args) {
		
		repository.deleteAll();
		
		// save a couple of customers
		repository.save(new Customer("Alice", "Smith"));
		
		// Normal query
//		Customer customer = repository.findByFirstName("Alice");
//		repository.findByLastName("Smith");
		
		//https://stackoverflow.com/questions/38509882/how-are-spring-data-repositories-actually-implemented
		MongoRepositoryFactory factory = new MongoRepositoryFactory(mongoTemplate);
		CustomerRepository customerRepository = factory.getRepository(CustomerRepository.class);
		
//		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(CustomerRepository.class);
//		context.register();
//		context.scan();
//		context.getBean(CustomerRepository.cla0ss);
		
		//https://spring.io/blog/2012/05/23/transactions-caching-and-aop-understanding-proxy-usage-in-spring
		//name is proxy
		System.out.println("Repository is: " + repository.getClass().getName());
		
		// Evil query
//		repository.findByFirstName("T(java.lang.Runtime).getRuntime().exec(\"gnome-calculator\")");
	}
}
